# Challenge 1
# In the database, there is the concept of Customer and Employee. The company wants to create a
# new concept, called Contact, which may be either a customer or an employee. You are asked to
# develop a unified view over the Customer and Employee tables to provide this new concept. The
# view should use the common attributes between both tables.

	create or replace view Contact(FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email) as
		select FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email
		from Customer

		union

		select FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email
		from Employee;

# Challenge 3
# The company is worried about the quality of data in the Customer table. Use a data profiling
# tool to conduct an analysis and provide your own conclusions with respect to completeness,
# string fields, referential integrity, and value distributions.

	-> Completeness:
		- 50 out of the 59 records have some kind of information missing.
		- Only 10 out of the 59 records use the Company field.
		- Some records (29/59) do not use the State field.
		- Some records (4/59) have no PostalCode. 
		- Only 11 ou of the 59 records use the Fax field.
		- 1 record has no Phone.

	-> Referential Integrity:
		- Regarding the field SupportRepId, there are no unresolved values, meaning that every SupportRepId in the Customer table exists as an EmployeeId in the Employee table. 

	-> String Fields:
		- The longest string  (48 chars) appears in the Company field.
		- On average, the field Email has the longest strings (21.017 chars).
		- Only the fields FirstName, State and Email have a single word and no spaces in all records.
		- Only the Email field is written entirely in lowercase.
		- There is no field with its string written entirely in uppercase.
		- The strings on the fields FirstName, LastName, Company, City, State, and Country have no digits.
		- Some of the chars in Address (163/1055) and Email (5/1240) are digits.
		- Most of the chars in PostalCode (273/332), Phone (676/973) and Fax (138/208) are digits.
		- Diacritic chars are used in all fields except for State, Country, PostalCOde, Phone and Fax.

	-> Value Distributions:
		- 49 out of the 59 customers are individuals. The remaining 10 represent 10 different companies.
		- There are customers form 24 distinct countries. Most of them are from the USA (13), Canada (8), Brazil (5) and France(5).     
		- All of the 59 customers are supported by only 3 distinct Representatives, with id's 3, 4 and 5.   

# Challenge 4
# The company would like to build a data warehouse to analyze sales and quantity by track, album, 
# artist, customer, geography and time. These should be organized into appropriate dimensions, namely:
#	• a track dimension with track name, album title, artist name
#	• a customer dimension with full name, city, country
#	• a time dimension with day, month, year
# You should propose a star schema for this purpose, and provide the instructions for creating such 
# data warehouse.   

	In MySQL execute the following command:
		$ source challenge4_dw_script.sql;      

# Challenge 6
# Once the data warehouse has been created and populated, write two SQL queries to illustrate the types 
# of analysis that can be carried out with pure SQL over the data warehouse. The queries should involve 
# multiple dimensions. Using your own words, briefly explain what each query is doing, and show the query
# results (or an excerpt of the results, if they are too large).

	1. The following query allows us to see the sales made by each artist per year. As such, after joining the necessary tables (fact_invoice, dim_time and dim_track), we obtain the value of every invoice line (LineTotal) per artist, per year. The years are in descending order. For each year, we then order the artist according to their total sales. If there are two artist with the same TotalSales value, they are presented in alphabetic order.

		SELECT time.YearId as Year, track.ArtistName, SUM(fact.LineTotal) as TotalSales
		FROM fact_invoice fact
		NATURAL JOIN dim_time time
		NATURAL JOIN dim_track track
		GROUP BY Year, track.ArtistName
		ORDER BY Year DESC, TotalSales DESC, track.ArtistName ASC;

	2. The following query allows us to see which were the 5 (limit 5) Albums that, since 2010 (WHERE time.YearId >= 2010), had more customers. In fact, first we select all the records from 2010 on, then group them by year and album title in order to obtain a count of distinct customerId's per AlbumTitle, per Year. The years are shown in descending order. Then, for each year, the records are in descending order with respect to the number of customers associated to it. If two records have equal number of customers, they are presented in alphabetical order with repect to the Album title. 
	(Not all results are shown in the corresponding image.)

		SELECT time.YearId as Year, track.AlbumTitle, COUNT(distinct fact.CustomerId) as Customers
		FROM  fact_invoice fact
		NATURAL JOIN dim_time time
		NATURAL JOIN dim_track track
		WHERE time.YearId >= 2010
		GROUP BY Year, track.AlbumTitle
		ORDER BY Year DESC, Customers DESC, AlbumTitle ASC
		LIMIT 5;
		
# Challenge 7
# Use Pentaho Schema Workbench (PSW) to define the data cube for the data warehouse.

	See 'challenge7.xml'



