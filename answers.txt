# Challenge 1
# In the database, there is the concept of Customer and Employee. The company wants to create a
# new concept, called Contact, which may be either a customer or an employee. You are asked to
# develop a unified view over the Customer and Employee tables to provide this new concept. The
# view should use the common attributes between both tables.

	create or replace view Contact(FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email) as
		select FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email
		from Customer

		union

		select FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Fax, Email
		from Employee;

# Challenge 3
# The company is worried about the quality of data in the Customer table. Use a data profiling
# tool to conduct an analysis and provide your own conclusions with respect to completeness,
# string fields, referential integrity, and value distributions.

	-> Completeness:
		- 50 out of the 59 records have some kind of information missing.
		- Only 10 out of the 59 records use the Company field.
		- Some records (29/59) do not use the State field.
		- Some records (4/59) have no PostalCode. 
		- Only 11 ou of the 59 records use the Fax field.
		- 1 record has no Phone.

	-> Referential Integrity:
		- Regarding the field SupportRepId, there are no unresolved values, meaning that every SupportRepId in the Customer table exists as an EmployeeId in the Employee table. 

	-> String Fields:
		- The longest string  (48 chars) appears in the Company field.
		- On average, the field Email has the longest strings (21.017 chars).
		- Only the fields FirstName, State and Email have a single word and no spaces in all records.
		- Only the Email field is written entirely in lowercase.
		- There is no field with its string written entirely in uppercase.
		- The strings on the fields FirstName, LastName, Company, City, State, and Country have no digits.
		- Some of the chars in Address (163/1055) and Email (5/1240) are digits.
		- Most of the chars in PostalCode (273/332), Phone (676/973) and Fax (138/208) are digits.
		- Diacritic chars are used in all fields except for State, Country, PostalCOde, Phone and Fax.

	-> Value Distributions:
		- 49 out of the 59 customers are individuals. The remaining 10 represent 10 different companies.
		- There are customers form 24 distinct countries. Most of them are from the USA (13), Canada (8), Brazil (5) and France(5).     
		- All of the 59 customers are supported by only 3 distinct Representatives, with id's 3, 4 and 5.   

# Challenge 4
# The company would like to build a data warehouse to analyze sales and quantity by track, album, 
# artist, customer, geography and time. These should be organized into appropriate dimensions, namely:
#	• a track dimension with track name, album title, artist name
#	• a customer dimension with full name, city, country
#	• a time dimension with day, month, year
# You should propose a star schema for this purpose, and provide the instructions for creating such 
# data warehouse.   

	In MySQL execute the following command:
		$ source challenge4_dw_script.sql;      

# Challenge 6
# Once the data warehouse has been created and populated, write two SQL queries to illustrate the types 
# of analysis that can be carried out with pure SQL over the data warehouse. The queries should involve 
# multiple dimensions. Using your own words, briefly explain what each query is doing, and show the query
# results (or an excerpt of the results, if they are too large).

	1. The following query allows us to see the sales made by each artist per year. As such, after joining the necessary tables (fact_invoice, dim_time and dim_track), we obtain the value of every invoice line (LineTotal) per artist, per year. The years are in descending order. For each year, we then order the artist according to their total sales. If there are two artist with the same TotalSales value, they are presented in alphabetic order.

		SELECT time.YearId as Year, track.ArtistName, SUM(fact.LineTotal) as TotalSales
		FROM fact_invoice fact
		NATURAL JOIN dim_time time
		NATURAL JOIN dim_track track
		GROUP BY Year, track.ArtistName
		ORDER BY Year DESC, TotalSales DESC, track.ArtistName ASC;

	2. The following query allows us to see which were the 5 (limit 5) Albums that, since 2010 (WHERE time.YearId >= 2010), had more customers. In fact, first we select all the records from 2010 on, then group them by year and album title in order to obtain a count of distinct customerId's per AlbumTitle, per Year. The years are shown in descending order. Then, for each year, the records are in descending order with respect to the number of customers associated to it. If two records have equal number of customers, they are presented in alphabetical order with repect to the Album title. 
	(Not all results are shown in the corresponding image.)

		SELECT time.YearId as Year, track.AlbumTitle, COUNT(distinct fact.CustomerId) as Customers
		FROM  fact_invoice fact
		NATURAL JOIN dim_time time
		NATURAL JOIN dim_track track
		WHERE time.YearId >= 2010
		GROUP BY Year, track.AlbumTitle
		ORDER BY Year DESC, Customers DESC, AlbumTitle ASC
		LIMIT 5;
		
# Challenge 7
# Use Pentaho Schema Workbench (PSW) to define the data cube for the data warehouse.

	See 'challenge7.xml'

# Challenge 9
# Simplify as much as possible the MDX code that Saiku has generated for the previous queries, 
# making them more easily readable or understandable by a human.

	1. Original:
		WITH
			SET [~COLUMNS] AS
			    {[Time].[Time Hierarchy].[Year].Members}
			SET [~ROWS] AS
			    {[Customer].[Customer Hierarchy].[Country].Members}
		SELECT
			CrossJoin([~COLUMNS], {[Measures].[Sales]}) ON COLUMNS,
			[~ROWS] ON ROWS
		FROM [Invoices]

	Simplified:
		SELECT 
		    CrossJoin(Time.Year.Members, Measures.Sales) ON COLUMNS,
		    Customer.Country.Members ON ROWS
		FROM Invoices

	2. Original:
		WITH
			SET [~Customer_Customer Hierarchy_Country] AS
			    {[Customer].[Customer Hierarchy].[USA]}
			SET [~Customer_Customer Hierarchy_City] AS
			    Exists({[Customer].[Customer Hierarchy].[City].Members}, [~Customer_Customer Hierarchy_Country])
			SET [~COLUMNS] AS
			    Hierarchize({[~Customer_Customer Hierarchy_Country], [~Customer_Customer Hierarchy_City]})
			SET [~Time_Time Hierarchy_Year] AS
			    {[Time].[Time Hierarchy].[2013]}
			SET [~Time_Time Hierarchy_Month] AS
			    Exists({[Time].[Time Hierarchy].[Month].Members}, [~Time_Time Hierarchy_Year])
			SET [~ROWS] AS
			    Hierarchize({[~Time_Time Hierarchy_Year], [~Time_Time Hierarchy_Month]})
		SELECT
			NON EMPTY CrossJoin([~COLUMNS], {[Measures].[Sales], [Measures].[Quantity]}) ON COLUMNS,
			NON EMPTY [~ROWS] ON ROWS
		FROM [Invoices]

	Simplified:
		WITH
			SET GetCities_USA AS
				Exists(Customer.City.Members, Customer.Country.USA)

			SET USA_Cities AS
				Hierarchize({Customer.Country.USA, GetCities_USA})

			SET GetMonths_2013 AS
				Exists(Time.Month.Members, Time.Year.[2013])
				
			SET Months_2013 AS
				Hierarchize({Time.Year.[2013], GetMonths_2013})
		SELECT
			NON EMPTY CrossJoin(USA_Cities, {Measures.Sales, Measures.Quantity}) ON COLUMNS,
			NON EMPTY Months_2013 ON ROWS
		FROM Invoices

# Challenge 11
# Turn the customer dimension into a slowly-changing dimension, so that if a customer changes
# city or country, a new version of that customer will be created. Describe the modifications
# that you had to do in order to implement this slowly-changing dimension, and present an example
# to show that it is working.

	Changes:
		1. See challenge11_dw_script.sql
			- CustomerId is no longer the primary key of the dim_customer table because we will now have have multiple records for the same customer. For that reason, Customer_ID was created. Every new update on a customer will have a Customer_ID that correspondes to the maximum Customer_ID + 1.
			- Such modification allows us to have multiple an history of one same client's information.
		2. Only the transformations regarding the customer dimension and the fact table had to be changed.
		   Regarding the customer dimension:
			   	- The Insert / Update step was replaced by a Dimension lookup/update. 
			   	- The technical key is set to be Customer_ID, otherwise everytime there was a change in a customer's information, when trying to insert the new info, it would return a duplicate key error and fail.

		   Fact table:
		   		- A Database lookup step was inserted before the Insert / Update.
		   		- This was needed because the fact table no longer has the CustomerId as it comes from the Chinook database, but the technical key Customer_ID. As such the lookup allows us to get the Customer_ID corresponding to a certain CustomerId.

		<<show prints>>


	Example:
		mysql>use Chinook;

		mysql>select CustomerId, FirstName, LastName, City, Country from Customer limit 5;

			// we will change the fist result:
			// 1 | Luís       | Gonçalves    | São José dos Campos   | Brazil  

		mysql> update Customer set FirstName="John", LastName="Cena" where CustomerId = 1;

			// run the transformation for dim_customer again

		mysql> use chinook_dw_sc;

		mysql> select * from dim_customer where CustomerId = 1;
		
			// 2 rows are displayed, one with the original information and VERSION = 1 and one reflecting the update made previously and VERSION = 2

